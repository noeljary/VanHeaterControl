import board
import time
from digitalio  import DigitalInOut, Direction
from analogio   import AnalogIn

class Thermistor:

    lookup = {-40 : 277200, -39 : 263600, -38 : 250100, -37 : 236800, -36 : 224000, -35 : 211500, -34 : 199600, -33 : 188100, -32 : 177300, -31 : 167000, -30 : 157200, -29 : 148100, -28 : 139400, -27 : 131300, -26 : 123700, -25 : 116600, -24 : 110000, -23 : 103700, -22 : 97900, -21 : 92500, -20 : 87430, -19 : 82790, -18 : 78440, -17 : 74360, -16 : 70530, -15 : 66920, -14 : 63540, -13 : 60340, -12 : 57330, -11 : 54500, -10 : 51820, -9 : 49280, -8 : 46890, -7 : 44620, -6 : 42480, -5 : 40450, -4 : 38530, -3 : 36700, -2 : 34970, -1 : 33330, 0 : 31770, 1 : 30250, 2 : 28820, 3 : 27450, 4 : 26160, 5 : 24940, 6 : 23770, 7 : 22670, 8 : 21620, 9 : 20630, 10 : 19680, 11 : 18780, 12 : 17930, 13 : 17120, 14 : 16350, 15 : 15620, 16 : 14930, 17 : 14260, 18 : 13630, 19 : 13040, 20 : 12470, 21 : 11920, 22 : 11410, 23 : 10910, 24 : 10450, 25 : 10000, 26 : 9575, 27 : 9170, 28 : 8784, 29 : 8416, 30 : 8064, 31 : 7730, 32 : 7410, 33 : 7106, 34 : 6815, 35 : 6538, 36 : 6273, 37 : 6020, 38 : 5778, 39 : 5548, 40 : 5327, 41 : 5117, 42 : 4915, 43 : 4723, 44 : 4539, 45 : 4363, 46 : 4195, 47 : 4034, 48 : 3880, 49 : 3733, 50 : 3592, 51 : 3457, 52 : 3328, 53 : 3204, 54 : 3086, 55 : 2972, 56 : 2863, 57 : 2759, 58 : 2659, 59 : 2564, 60 : 2472, 61 : 2384, 62 : 2299, 63 : 2218, 64 : 2141, 65 : 2066, 66 : 1994, 67 : 1926, 68 : 1860, 69 : 1796, 70 : 1735, 71 : 1677, 72 : 1621, 73 : 1567, 74 : 1515, 75 : 1465, 76 : 1417, 77 : 1371, 78 : 1326, 79 : 1284, 80 : 1243, 81 : 1203, 82 : 1165, 83 : 1128, 84 : 1093, 85 : 1059, 86 : 1027, 87 : 995.5, 88 : 965.4, 89 : 936.3, 90 : 908.3, 91 : 881.2, 92 : 855, 93 : 829.7, 94 : 805.2, 95 : 781.6, 96 : 758.7, 97 : 736.6, 98 : 715.2, 99 : 694.5, 100 : 674.4, 101 : 655.8, 102 : 637.6, 103 : 619.9, 104 : 602.6, 105 : 585.8, 106 : 569.4, 107 : 553.5, 108 : 538, 109 : 522.9, 110 : 508.3, 111 : 494.1, 112 : 480.3, 113 : 466.9, 114 : 453.9, 115 : 441.2, 116 : 429, 117 : 417.1, 118 : 405.5, 119 : 394.4, 120 : 383.5, 121 : 373, 122 : 362.8, 123 : 353, 124 : 343.4, 125 : 334.1, 126 : 325.3, 127 : 316.7, 128 : 308.3, 129 : 300.2, 130 : 292.4, 131 : 284.8, 132 : 277.4, 133 : 270.2, 134 : 263.3, 135 : 256.5, 136 : 250, 137 : 243.7, 138 : 237.5, 139 : 231.6, 140 : 225.8, 141 : 220.2, 142 : 214.8, 143 : 209.5, 144 : 204.4, 145 : 199.4, 146 : 194.6, 147 : 190, 148 : 185.5, 149 : 181.1, 150 : 176.9, 151 : 172.8, 152 : 168.8, 153 : 165, 154 : 161.2, 155 : 157.6, 156 : 154.1, 157 : 150.7, 158 : 147.4, 159 : 144.1, 160 : 141, 161 : 137.9, 162 : 135, 163 : 132.1, 164 : 129.3, 165 : 126.5, 166 : 123.9, 167 : 121.3, 168 : 118.7, 169 : 116.3, 170 : 113.9, 171 : 111.5, 172 : 109.2, 173 : 107, 174 : 104.8, 175 : 102.7, 176 : 100.6, 177 : 98.6, 178 : 96.6, 179 : 94.7, 180 : 92.8, 181 : 90.9, 182 : 89.1, 183 : 87.3, 184 : 85.6, 185 : 83.9, 186 : 82.2, 187 : 80.6, 188 : 79, 189 : 77.4, 190 : 75.9, 191 : 74.3, 192 : 72.9, 193 : 71.4, 194 : 70, 195 : 68.6, 196 : 67.2, 197 : 65.8, 198 : 64.5, 199 : 63.1, 200 : 61.9}

    a = None
    b = None

    avg_count = 5

    maintain = True

    temperature = {"AIN" : AnalogIn(board.GP28), "PWR" : DigitalInOut(board.GP3), "SEL_A" : DigitalInOut(board.GP4), "SEL_B" : DigitalInOut(board.GP5)}
    for pin in ("PWR", "SEL_A", "SEL_B"):
        temperature[pin].direction = Direction.OUTPUT
        temperature[pin].value     = False

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def value(self):
        temp_value = 0

        Thermistor.temperature["SEL_A"].value = self.a
        Thermistor.temperature["SEL_B"].value = self.b
        Thermistor.temperature["PWR"].value = True

        for i in range(0, Thermistor.avg_count - 1, 1):
            temp_value += Thermistor.temperature["AIN"].value
            time.sleep(0.001)

        Thermistor.temperature["PWR"].value = False

        resistance = abs(10000 * (1 / (((temp_value / Thermistor.avg_count) / 65536) - 1)))

        for temp_keys in Thermistor.lookup.keys():
            if resistance >= Thermistor.lookup[temp_keys]:
                return temp_keys

    def start(self):
        return
